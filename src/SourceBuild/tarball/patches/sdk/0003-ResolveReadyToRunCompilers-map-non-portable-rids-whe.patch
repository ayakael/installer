From bebcde2bca235fe75db578686d5d72c965d31859 Mon Sep 17 00:00:00 2001
From: Tom Deseyn <tom.deseyn@gmail.com>
Date: Fri, 7 Oct 2022 08:31:58 +0200
Subject: [PATCH 1/1] ResolveReadyToRunCompilers: map non-portable rids when
 targetOS is determined.

---
 .../ResolveReadyToRunCompilers.cs             | 53 +++++++++++++++----
 1 file changed, 44 insertions(+), 9 deletions(-)

diff --git a/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs b/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs
index 716a7f37c3..2d91ed4dfc 100644
--- a/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs
+++ b/src/Tasks/Microsoft.NET.Build.Tasks/ResolveReadyToRunCompilers.cs
@@ -143,21 +143,13 @@ private bool ValidateCrossgen2Support()
 
             bool version5 = crossgen2PackVersion.Major < 6;
             bool isSupportedTarget = ExtractTargetPlatformAndArchitecture(_targetRuntimeIdentifier, out _targetPlatform, out _targetArchitecture);
-            string targetOS = _targetPlatform switch
-            {
-                "linux" => "linux",
-                "linux-musl" => "linux",
-                "osx" => "osx",
-                "win" => "windows",
-                _ => null
-            };
 
             // In .NET 5 Crossgen2 supported only the following host->target compilation scenarios:
             //      win-x64 -> win-x64
             //      linux-x64 -> linux-x64
             //      linux-musl-x64 -> linux-musl-x64
             isSupportedTarget = isSupportedTarget &&
-                targetOS != null &&
+                GetCrossgen2TargetOS(out string targetOS) &&
                 (!version5 || _targetRuntimeIdentifier == _hostRuntimeIdentifier) &&
                 GetCrossgen2ComponentsPaths(version5);
 
@@ -188,6 +180,49 @@ private bool ValidateCrossgen2Support()
             return true;
         }
 
+        private bool GetCrossgen2TargetOS(out string targetOS)
+        {
+            targetOS = null;
+
+            // Determine targetOS based on target rid.
+            // Use the runtime graph to support non-portable target rids.
+            var runtimeGraph = new RuntimeGraphCache(this).GetRuntimeGraph(RuntimeGraphPath);
+            string portablePlatform = NuGetUtils.GetBestMatchingRid(
+                    runtimeGraph,
+                    _targetPlatform,
+                    new[] { "linux", "linux-musl", "osx", "win" },
+                    out _);
+
+            // For source-build, allow the bootstrap SDK rid to be unknown to the runtime graph that
+            // is in the runtime repo.
+            if (portablePlatform == null and _targetRuntimeIdentifier == _hostRuntimeIdentifier)
+            {
+                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+                {
+                    portablePlatform = "linux";
+                }
+                else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
+                {
+                    portablePlatform = "win";
+                }
+                else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
+                {
+                    portablePlatform = "osx";
+                }
+            }
+
+            targetOS = portablePlatform switch
+            {
+                "linux" => "linux",
+                "linux-musl" => "linux",
+                "osx" => "osx",
+                "win" => "windows",
+                _ => null
+            };
+
+            return targetOS != null;
+        }
+
         private ITaskItem GetNETCoreAppRuntimePack()
         {
             return GetNETCoreAppPack(RuntimePacks, MetadataKeys.FrameworkName);
-- 
2.37.2

